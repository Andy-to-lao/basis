1.在C++11中，如果想要禁止类的拷贝行为只需要把相应的函数设为 = delete即可，参见标准库的std::unique_ptr；而需要保留的加 "= default" 或者不采取操作
  unique_ptr (const unique_ptr&) = delete;
  unique_ptr& operator= (const unique_ptr&) = delete;
2.在c++11直接定义函数体代替静态函数是非常常用的方式。
3.unique_ptr功能基本对应boost的scoped_ptr，或之前stl的auto_ptr，生命周期随构造者，reset自动析构再重新构造，get判断是否有效、支持放在容器内；
4.C++11对map容器的访问：下标访问、at（）、find、lower_bound&upper_bound、equal_range，其中at（）比较安全，不会溢出。at（）也可以访问vector
5.这里介绍一个如何删除容器中元素的函数，包括顺序容器和关联容器。就是这个erase函数，基本用法如下：
  c.erase(b,e)---从c中删除迭代器对b和e所表示的范围中的元素，返回e
6.C++11 新增了emplace_back方法，比push_back的效率要高很多。
7.向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的  对象  。可以简单的认为，向量是一个能够存放任意类型的动态数组。（1）Vector<类型>标识符（2）Vector<类型>标识符(最大容量)（3）Vector<类型>标识符(最大容量,初始所有值)（4）Int i[5]={1,2,3,4,5}（5）Vector<类型>vi(I,i+2);//得到i索引值为3以后的值（6）Vector< vector< int> >v; 二维向量//这里最外的<>要有空格。否则在比较旧的编译器下无法通过。（1）pop_back()&push_back(elem)实例在容器最后移除和插入数据；（2）clear()清除容器中所有数据；（3）sort(obj.begin(),obj.end());//从小到大排序，  reverse(obj.begin(),obj.end());//从大到小排序；（4）cout<<obj[i]<<" ";直接访问，vector<int>::iterator it;//声明一个迭代器，来访问vector容器，作用：遍历或者指向vector容器的元素，迭代器访问。
8.class CExample {
        public:
            int a;
            float b;
            //构造函数初始化列表
            CExample(): a(0),b(8.8)
            {}
            //构造函数内部赋值
            CExample()
            {
                a=0;
                b=8.8;
            }
        };

9.struct是阉割版的class，struct也可以有构造函数，构造函数可以进行重载
10.constexpr是C++11中新增的关键字，其语义是“常量表达式”，也就是在编译期可求值的表达式。
11.c++ 11 lambda表达式类似于函数变量。 auto c = [=] {return a + b;}; //调用c()时候不会更新返回值  auto d = [&] {return a + b;};由于是取址，会改变。
12. std::stringstream 用于参数类型转换
13.std::deque是双端队列，可以高效的在头尾两端插入和删除元素，在接口上和std::vector相似。
14.std::move并不能移动任何东西，它唯一的功能是将一个左值强制转化为右值引用，继而可以通过右值引用使用该值，以用于移动语义。（1）C++ 标准库使用比如vector::push_back 等这类函数时,会对参数的对象进行复制,连数据也会复制.这就会造成对象内存的额外创建, 本来原意是想把参数push_back进去就行了,通过std::move，可以避免不必要的拷贝操作。（2）std::move是将对象的状态或者所有权从一个对象转移到另一个对象，只是转移，没有内存的搬迁或者内存拷贝所以可以提高利用效率,改善性能。（3）对指针类型的标准库对象并不需要这么做。
15.std::unique_ptr不共享指针，只可以move不可以复制，防止占用空间未释放
16.“引用”与指针的区别是什么？指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。此外，就是上面提到的对函数传ref和pointer的区别。
17.错误：Assertion `px != 0' failed  智能指针未初始化
18.cout设置精度：
    std::cout.setf(std::ios::fixed, std::ios::floatfield);
    std::cout.precision(6);
19.进程加速OpenMP
  #pragma omp parallel for  schedule(runtime)
20.assert()若条件返回错误，则终止程序执行，可以用NDEBUG来关闭
21.if(log.isDebugEnabled()){
   log.debug("debug！"); } 
